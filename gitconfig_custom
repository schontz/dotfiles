# ============================
# START_DOTFILES
# @schontz/dotfiles/gitconfig
# ============================

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[alias]
  b = branch

  # Checkout branch with fzf list
  co = !git for-each-ref --format='%(refname:short)' refs/heads | fzf --height 50% --preview='git log {} --oneline --color=always --graph --date=short' | xargs git checkout

  # Checkout master
  cm = "!git checkout $(git master-name)"

  # repo name
  repo-name = !basename `git rev-parse --show-toplevel`

  # name of the origin master branch
  master-name = !sh -c '~/.config/git/detect-master.sh'

  # c/o https://gist.github.com/robmiller/6018582
  # Get the current branch name (not so useful in itself, but used in
  # other aliases)
  branch-name = rev-parse --abbrev-ref HEAD
  # Push the current branch to the remote "origin", and set it to track
  # the upstream branch
  publish = "!git push -u origin $(git branch-name)"
  # Delete the remote version of the current branch
  unpublish = "!git push -d origin $(git branch-name)"
  # Interactively rebase all the commits on the current branch
  rebase-branch = "!git rebase -i `git merge-base master HEAD`"
  # Delete local and remote branch
  nuke = !sh -c 'git branch -D $1 && git push origin :$1' -

  # Find the commits that were introduced by a merge
  merge-log = "!git log `git merge-span .. $1`"
  # Show the changes that were introduced by a merge
  merge-diff = "!git diff `git merge-span ... $1`"
  # As above, but in your difftool
  merge-difftool = "!git difftool `git merge-span ... $1`"
  # Perform a squashed merge
  merges = merge --squash

  # Pull and rebase
  pullr = "!git pull --rebase origin $(git branch-name)"
  pl = "!git pull origin $(git branch-name)"
  # Pull and rebase and push
  prp = "!git pullr && git push"

  # Better logging
  # https://thoughtbot.com/blog/dumpster-diving-through-dotfiles-better-git-logging
  sl = log --oneline --decorate -20 --color=always
  sla = log --oneline --decorate --graph --all --color=always -30
  slap = log --oneline --decorate --graph --all --color=always

  # Unstage any files that have been added to the staging area
  unstage = reset HEAD
  # Undo commit
  undo = reset HEAD^
  # Show changes that have been staged
  diffc = diff --cached

  ahead = "!git rev-list --right-only --count $(git master-name)...$(git branch-name)"
  behind = "!git rev-list --left-only --count $(git master-name)...$(git branch-name)"

  # squash branch
  sb = "!git rebase -i HEAD~$(git ahead)"
[core]
  excludesfile = ~/.gitignore
[commit]
  verbose = true
[include]
  path = ~/.gitconfig.local
[pull]
	rebase = true
[pager]
	branch = false
